def beautifulBinaryString(binaryString):
    ASCII_A = 65
    listA = []
    listB = []
    charIdxs = [list(listA), list(listB)]
    for i in range(len(binaryString)):
        if (binaryString[i] != 'A' and binaryString[i] != 'B'):
            return False
        charIdxs[ord(binaryString[i]) - ASCII_A].append(i)
    print(charIdxs)
    if (len(charIdxs[0]) % 2 or len(charIdxs[1]) % 2):
        return False
    for charIdx in charIdxs:
        matchIdx = []
        for i in range(len(charIdx) - 1):
            if i in matchIdx:
                continue
            for j in range(i + 1, len(charIdx)):
                if j in matchIdx:
                    continue
                if (j  - i) % 2 == 0:   #insect same
                    continue
                else:
                    if (charIdx[j] - charIdx[i] % 2 != 0): #not insect diff
                        matchIdx.append(i)
                        matchIdx.append(j)
                        break
        print(matchIdx)                        
        
                        
    return True
    
    
print(beautifulBinaryString("BABBBA"))



import os
import openpyxl

filePath = "D:/Workspace/SuportTool/testTargetList_template.xlsx"
headerCoor = ["A1", "G2"]

# get excel template.
wb = openpyxl.load_workbook(filePath)
sheet = wb["Sheet1"]    
print(sheet.merged_cells.ranges)  

# get value from merged cell
def GetValueWithMergeLookup(sheet, cell):
    idx = cell.coordinate
    for cellRange in sheet.merged_cells.ranges:
        merged_cells = list(openpyxl.utils.rows_from_range(cellRange.__str__()))
        # print(29, merged_cells)
        for ecell in merged_cells:
            # print(ecell)
            if idx in ecell:
                # If this is a merged cell, return  the first cell of the merge range
                # print(35, merged_cells[0])
                return sheet[ecell[0]].value
    return sheet[idx].value

def IsHeaderCell(sheet, cell):
    idx = cell.coordinate
    for cellRange in sheet.merged_cells.ranges:
        # get list of cells in range.
        merged_cells = list(openpyxl.utils.rows_from_range(cellRange.__str__()))
        for ecell in merged_cells:
            # if this cell is in range, and this cell is the first cell.
            if idx in ecell:
                return ecell[0] == idx
    # if this cell is not merged cell, check it value.                
    return cell.value != None    




headerCells = sheet[headerCoor[0]: headerCoor[1]]

headerList = []
# iterator each cell to determine struct
for rowOfCellObjs in headerCells:
    for cellObj in rowOfCellObjs:
        if IsHeaderCell(sheet, cellObj):
            # print(cellObj.coordinate)
            # if upper cell has a value. It is parent of this cell
            if (cellObj.row > 1):
                upperCell = sheet.cell(row=cellObj.row - 1, column=cellObj.column)
                upperValue = GetValueWithMergeLookup(sheet, upperCell) 
                parentHeader = upperValue
                header = cellObj.value
                coordinate = cellObj.coordinate
                headerStruct = (header, parentHeader, coordinate)
                headerList.append(headerStruct)
    
for header in headerList:
    print(header)







